// src/adapter/IAAdapter.js
const axios = require('axios');
const ResultadoIA = require('../entity/ResultadoIA');
const RegraDinamicaDAO = require('../dao/RegraDinamicaDAO');

class IAAdapter {
  constructor(options = {}) {
    this.regraDinamicaDAO = new RegraDinamicaDAO();
    
    // Configura√ß√£o do endpoint da IA
    this.endpoint = options.endpoint || process.env.IA_ENDPOINT || 'https://agent-fwsknwjtwgows7bbq34wgyka-lacbb.ondigitalocean.app/api/v1/chat/completions';
    this.accessKey = options.accessKey || process.env.IA_ACCESS_KEY || 'tLNu967VSaTZkiWzvNJvAX5a4cnN7ilb';
    this.model = options.model || process.env.IA_MODEL || 'anthropic.claude-3-haiku-20240307';
    
    console.log('=================== INICIALIZA√á√ÉO DO ADAPTER IA ===================');
    console.log(`‚û°Ô∏è Endpoint: ${this.endpoint}`);
    console.log(`‚û°Ô∏è Modelo: ${this.model}`);
    console.log(`‚û°Ô∏è Access Key configurada: ${this.accessKey ? 'Sim (***' + this.accessKey.slice(-4) + ')' : 'N√£o'}`);
    console.log('===================================================================');
    
    // Tempo limite para requisi√ß√£o (default: 10 segundos)
    this.timeout = options.timeout || parseInt(process.env.TIMEOUT_IA || '10000');
    
    // Defini√ß√£o da ferramenta de function calling para decis√£o de cr√©dito
    this.tools = [
      {
        type: "function",
        function: {
          name: "creditDecision",
          description: "Decide if a credit application should be approved, rejected, or sent for manual review",
          parameters: {
            type: "object",
            properties: {
              decision: {
                type: "string",
                enum: ["APPROVE", "REJECT", "MANUAL_REVIEW"],
                description: "The decision for the credit application"
              },
              confidence: {
                type: "number",
                description: "Confidence level in the decision (0-1)",
                minimum: 0,
                maximum: 1
              },
              justification: {
                type: "string",
                description: "Brief explanation for the decision"
              },
              suggestedRules: {
                type: "array",
                description: "Optional suggested new dynamic rules based on this analysis",
                items: {
                  type: "object",
                  properties: {
                    name: {
                      type: "string",
                      description: "Name of the rule"
                    },
                    description: {
                      type: "string",
                      description: "Description of the rule"
                    },
                    type: {
                      type: "string",
                      enum: ["COMPROMETIMENTO_RENDA", "VALOR_MAXIMO", "SCORE_CONDICIONAL", "PRAZO_MINIMO"],
                      description: "Type of the rule"
                    },
                    parameters: {
                      type: "object",
                      description: "Parameters specific to the rule type"
                    }
                  },
                  required: ["name", "description", "type", "parameters"]
                }
              }
            },
            required: ["decision", "confidence"]
          }
        }
      }
    ];
  }

  async avaliarCredito(cenario) {
    console.log('\n================== INICIANDO AVALIA√á√ÉO DE CR√âDITO IA ==================');
    console.log(`üìã Cliente ID: ${cenario.clienteId}`);
    console.log(`üí∞ Valor solicitado: R$ ${cenario.valorCredito}`);
    
    try {
      // Prepara os dados para envio √† IA
      console.log('üîÑ Preparando dados para IA...');
      const dadosParaIA = this.prepararDadosParaIA(cenario);
      
      // Logging de dados principais
      console.log(`üßê Score do cliente: ${dadosParaIA.bureau?.score || 'N√£o dispon√≠vel'}`);
      console.log(`üíº Renda mensal: R$ ${dadosParaIA.cliente?.rendaMensal || 'N√£o dispon√≠vel'}`);
      console.log(`‚è±Ô∏è Tempo de relacionamento: ${dadosParaIA.openBanking?.tempoRelacionamentoMeses || 'N√£o dispon√≠vel'} meses`);
      
      // Chama a API de IA com function calling
      console.log('üìû Chamando API IA com function calling...');
      console.log(`‚è±Ô∏è Timeout configurado: ${this.timeout}ms`);
      const startTime = Date.now();
      
      const resultadoAPI = await this.chamarAPIComFunctionCalling(dadosParaIA);
      
      const endTime = Date.now();
      console.log(`‚úÖ Resposta recebida em ${((endTime - startTime)/1000).toFixed(2)} segundos`);
      
      // Processar a resposta da API
      console.log('üîç Processando resposta da IA...');
      const resultadoIA = await this.processarRespostaFunctionCalling(resultadoAPI, cenario.clienteId);
      
      console.log('üìä Resultado da an√°lise IA:');
      console.log(`üî¥ Aprovado: ${resultadoIA.aprovado ? 'SIM' : 'N√ÉO'}`);
      console.log(`üîµ An√°lise Manual: ${resultadoIA.analiseManual ? 'SIM' : 'N√ÉO'}`);
      console.log(`üü¢ Confian√ßa: ${(resultadoIA.confianca * 100).toFixed(0)}%`);
      console.log(`üü° Justificativa: ${resultadoIA.justificativa}`);
      console.log('===================================================================\n');
      
      return resultadoIA;
    } catch (error) {
      console.error('\n‚ùå ERRO AO CONSULTAR IA:');
      console.error(`‚ùå Cliente ID: ${cenario.clienteId}`);
      console.error(`‚ùå Mensagem: ${error.message}`);
      
      if (error.response) {
        console.error(`‚ùå Status: ${error.response.status}`);
        console.error(`‚ùå Resposta: ${JSON.stringify(error.response.data || {}).substring(0, 200)}...`);
      }
      
      console.log('‚ö†Ô∏è Retornando resultado padr√£o para an√°lise manual por seguran√ßa');
      console.log('===================================================================\n');
      
      // Em caso de erro, retornar resultado para an√°lise manual
      return new ResultadoIA(
        false,
        "Erro ao consultar sistema de IA. Encaminhado para an√°lise manual por seguran√ßa.",
        0.5,
        true // An√°lise manual
      );
    }
  }

  prepararDadosParaIA(cenario) {
    // Usar o m√©todo toJsonForIA se dispon√≠vel, ou construir manualmente
    if (typeof cenario.toJsonForIA === 'function') {
      console.log('üì¶ Usando m√©todo toJsonForIA do cen√°rio');
      return cenario.toJsonForIA();
    }
    
    // Fallback para o caso do m√©todo n√£o estar dispon√≠vel
    console.log('üì¶ M√©todo toJsonForIA n√£o dispon√≠vel, construindo manualmente');
    return {
      id: cenario.id,
      clienteId: cenario.clienteId,
      valorCredito: cenario.valorCredito,
      dataCriacao: cenario.dataCriacao,
      cliente: cenario.getDadosPorTipo("DADOS_CLIENTE"),
      bureau: cenario.getDadosPorTipo("BUREAU_CREDITO"),
      openBanking: cenario.getDadosPorTipo("OPEN_BANKING"),
      parametrosAdicionais: cenario.parametrosAdicionais,
      resultadosAvaliacao: cenario.resultadosAvaliacao
    };
  }

  async chamarAPIComFunctionCalling(dadosParaIA) {
    // Formatar o JSON para enviar √† IA
    const cenario = {
      id: dadosParaIA.id || "cen_" + Math.random().toString(36).substring(2, 15),
      clienteId: dadosParaIA.clienteId,
      valorCredito: dadosParaIA.valorCredito.toString(),
      dataCriacao: new Date().toISOString(),
      cliente: dadosParaIA.cliente,
      bureau: dadosParaIA.bureau,
      openBanking: dadosParaIA.openBanking,
      resultadosAvaliacao: dadosParaIA.resultadosAvaliacao || []
    };
    
    // Mensagem para a API com instru√ß√£o de usar a fun√ß√£o
    const mensagemUser = `Analise este cen√°rio de cr√©dito e use a fun√ß√£o creditDecision para determinar se o cr√©dito deve ser aprovado, rejeitado ou enviado para an√°lise manual:

${JSON.stringify(cenario, null, 2)}

Considere que:
1. Se o cliente tiver alto score (>700) e renda mensal suficiente para cobrir o cr√©dito, geralmente √© uma aprova√ß√£o
2. Se o comprometimento da renda (assumindo parcelas de 10% do valor total do cr√©dito por m√™s) for maior que 30%, considere rejeitar
3. Se houver dados conflitantes ou incompletos, envie para an√°lise manual
4. Se identificar padr√µes ou regras que poderiam ser √∫teis para an√°lises futuras, sugira-as no campo suggestedRules
5. N√£o responda com texto, APENAS chame a fun√ß√£o`;

    console.log('üì§ Enviando dados para IA...');
    console.log(`üì§ Tamanho da mensagem: ${mensagemUser.length} caracteres`);
    
    try {
      console.log('üîß Tentando usar function calling...');
      
      const requestData = {
        model: this.model,
        messages: [
          {
            role: "user",
            content: mensagemUser
          }
        ],
        tools: this.tools,
        tool_choice: { type: "auto" },
        stream: false,
        max_tokens: 1024
      };
      
      console.log(`üì§ URL: ${this.endpoint}`);
      console.log(`üì§ Model: ${this.model}`);
      console.log('üì§ Tools configuradas para function calling');
      
      const response = await axios({
        method: 'post',
        url: this.endpoint,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.accessKey}`
        },
        data: requestData,
        timeout: this.timeout
      });

      // Verificar se a resposta cont√©m tool_calls
      if (response.data.tool_calls && response.data.tool_calls.length > 0) {
        console.log('‚úÖ Function calling bem-sucedido!');
        console.log(`üîß Fun√ß√£o chamada: ${response.data.tool_calls[0].function.name}`);
      } else {
        console.log('‚ö†Ô∏è Resposta recebida mas sem function calling');
      }

      return response.data;
    } catch (error) {
      // Verificar se √© um erro espec√≠fico de function calling n√£o suportado
      if (error.response && error.response.status === 400 && 
          error.response.data && error.response.data.error && 
          error.response.data.error.message && 
          error.response.data.error.message.includes('tools')) {
        
        console.warn('‚ö†Ô∏è Function calling n√£o suportado, tentando fallback para formato JSON...');
        return this.chamarAPIFallback(cenario);
      }
      
      throw error;
    }
  }
  
  async chamarAPIFallback(cenario) {
    // System prompt e user prompt para solicitar resposta em formato JSON
    const systemPrompt = `Voc√™ √© um analisador de cr√©dito que responde APENAS em formato JSON. NUNCA explique seu racioc√≠nio. NUNCA use texto fora do JSON.`;
    
    const userPrompt = `Analise os dados do cen√°rio de cr√©dito abaixo e retorne APENAS um objeto JSON com a seguinte estrutura:
{
  "decision": "APPROVE" ou "REJECT" ou "MANUAL_REVIEW",
  "confidence": n√∫mero entre 0 e 1,
  "justification": "breve explica√ß√£o"
}

IMPORTANTE: 
- Voc√™ DEVE retornar APENAS o objeto JSON acima, sem nenhum texto explicativo adicional.
- N√£o inclua markdown, coment√°rios ou qualquer outro texto.

DADOS DO CEN√ÅRIO:
${JSON.stringify(cenario, null, 2)}

LEMBRE-SE: Responda APENAS com o objeto JSON no formato especificado.`;

    console.log('üîÑ Utilizando m√©todo de fallback (JSON)...');
    console.log(`üì§ Tamanho da mensagem: ${userPrompt.length} caracteres`);
    
    const response = await axios({
      method: 'post',
      url: this.endpoint,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${this.accessKey}`
      },
      data: {
        model: this.model,
        messages: [
          {
            role: "system",
            content: systemPrompt
          },
          {
            role: "user",
            content: userPrompt
          }
        ],
        stream: false,
        max_tokens: 1024
      },
      timeout: this.timeout
    });

    console.log('‚úÖ Resposta JSON recebida com sucesso');
    
    // Simular resposta no formato de function calling
    return {
      choices: [
        {
          message: {
            content: response.data.choices[0].message.content
          }
        }
      ]
    };
  }

  async processarRespostaFunctionCalling(resposta, clienteId) {
    try {
      // Verificar se temos uma resposta de function calling
      const toolCalls = resposta.tool_calls || [];
      
      if (toolCalls.length > 0 && toolCalls[0].function && toolCalls[0].function.name === 'creditDecision') {
        console.log('üîç Processando resultado do function calling');
        // Extrair os argumentos da fun√ß√£o
        const args = JSON.parse(toolCalls[0].function.arguments);
        console.log(`üîç Argumentos recebidos: ${JSON.stringify(args)}`);
        
        // Verificar e persistir regras sugeridas, se houver
        if (args.suggestedRules && Array.isArray(args.suggestedRules) && args.suggestedRules.length > 0) {
          console.log(`üí° ${args.suggestedRules.length} regras sugeridas pela IA`);
          await this.persistirRegrasGeradas(args.suggestedRules);
        }
        
        // Converter para o formato ResultadoIA
        return new ResultadoIA(
          args.decision === 'APPROVE',
          args.justification || `IA ${args.decision === 'APPROVE' ? 'aprovou' : (args.decision === 'REJECT' ? 'rejeitou' : 'encaminhou para an√°lise manual')} o cr√©dito`,
          args.confidence || 0.8,
          args.decision === 'MANUAL_REVIEW'
        );
      }
      
      // N√£o encontrou function calling, tentar extrair de formato JSON normal
      console.log('üîç Function calling n√£o encontrado, tentando extrair JSON da resposta');
      const conteudoResposta = resposta.choices && resposta.choices[0] && resposta.choices[0].message
        ? resposta.choices[0].message.content
        : null;
      
      if (!conteudoResposta) {
        throw new Error('Resposta da IA n√£o cont√©m conte√∫do v√°lido');
      }
      
      console.log(`üîç Conte√∫do da resposta (primeiros 100 caracteres): ${conteudoResposta.substring(0, 100)}...`);
      
      // Tentar processar como JSON
      try {
        // Limpar o conte√∫do para extrair apenas o JSON
        let jsonString = conteudoResposta;
        if (jsonString.includes('```json')) {
          console.log('üîç Detectado formato markdown com json');
          jsonString = jsonString.split('```json')[1].split('```')[0].trim();
        } else if (jsonString.includes('```')) {
          console.log('üîç Detectado formato markdown');
          jsonString = jsonString.split('```')[1].split('```')[0].trim();
        }
        
        console.log(`üîç Tentando fazer parse do JSON: ${jsonString.substring(0, 100)}...`);
        const resultadoJSON = JSON.parse(jsonString);
        console.log(`‚úÖ Parse de JSON bem-sucedido: ${JSON.stringify(resultadoJSON)}`);
        
        // Verificar se temos uma decis√£o v√°lida
        if (resultadoJSON.decision) {
          console.log(`üîç Encontrada decis√£o: ${resultadoJSON.decision}`);
          return new ResultadoIA(
            resultadoJSON.decision === 'APPROVE',
            resultadoJSON.justification || `IA ${resultadoJSON.decision === 'APPROVE' ? 'aprovou' : (resultadoJSON.decision === 'REJECT' ? 'rejeitou' : 'encaminhou para an√°lise manual')} o cr√©dito`,
            resultadoJSON.confidence || 0.8,
            resultadoJSON.decision === 'MANUAL_REVIEW'
          );
        }
        
        // Se n√£o encontrou decision mas encontrou code (formato antigo)
        if (resultadoJSON.code !== undefined) {
          console.log(`üîç Encontrado c√≥digo (formato antigo): ${resultadoJSON.code}`);
          const codeMap = {
            0: { approved: false, justification: "IA rejeitou o cr√©dito com alta confian√ßa" },
            1: { approved: true, justification: "IA aprovou o cr√©dito com alta confian√ßa" },
            2: { approved: false, justification: "IA solicitou an√°lise manual para o cr√©dito", analiseManual: true }
          };
          
          const resultado = codeMap[resultadoJSON.code] || { approved: false, justification: "Resposta da IA n√£o reconhecida", analiseManual: true };
          
          return new ResultadoIA(
            resultado.approved,
            resultado.justification,
            resultadoJSON.confidence || 0.8,
            resultado.analiseManual || false
          );
        }
      } catch (jsonError) {
        console.error(`‚ö†Ô∏è Erro ao processar JSON da resposta para cliente ${clienteId}:`, jsonError.message);
      }
      
      // Se chegou aqui, usar √∫ltimo recurso: buscar por palavras-chave
      console.log('üîç Utilizando an√°lise de texto como √∫ltimo recurso');
      const conteudoLower = conteudoResposta.toLowerCase();
      
      if (conteudoLower.includes('aprovado') || conteudoLower.includes('aprove') || conteudoLower.includes('approve')) {
        console.log('üîç Texto sugere APROVA√á√ÉO');
        return new ResultadoIA(true, "Cr√©dito aprovado pela IA", 0.7, false);
      } else if (conteudoLower.includes('rejeitado') || conteudoLower.includes('rejeite') || conteudoLower.includes('reject')) {
        console.log('üîç Texto sugere REJEI√á√ÉO');
        return new ResultadoIA(false, "Cr√©dito rejeitado pela IA", 0.7, false);
      } else if (conteudoLower.includes('manual') || conteudoLower.includes('an√°lise') || conteudoLower.includes('review')) {
        console.log('üîç Texto sugere AN√ÅLISE MANUAL');
        return new ResultadoIA(false, "IA solicitou an√°lise manual", 0.7, true);
      }
      
      // Default: encaminhar para an√°lise manual
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel determinar a decis√£o a partir do texto');
      return new ResultadoIA(
        false,
        "Resposta da IA n√£o p√¥de ser interpretada. Encaminhado para an√°lise manual por seguran√ßa.",
        0.5,
        true
      );
    } catch (error) {
      console.error(`‚ùå Erro ao processar resposta da IA para cliente ${clienteId}:`, error.message);
      
      // Em caso de erro no processamento, retornar para an√°lise manual
      return new ResultadoIA(
        false,
        "Erro ao interpretar resposta da IA. Encaminhado para an√°lise manual por seguran√ßa.",
        0.5,
        true
      );
    }
  }

  /**
   * Persiste regras din√¢micas geradas pela IA
   * @param {Array} regras - Regras geradas pela IA
   */
  async persistirRegrasGeradas(regras) {
    try {
      if (!regras || !Array.isArray(regras) || regras.length === 0) {
        return; // N√£o h√° regras para persistir
      }
      
      console.log('üîÑ Persistindo regras sugeridas pela IA...');
      
      // Obter todas as regras existentes
      const regrasExistentes = await this.regraDinamicaDAO.listar();
      console.log(`üìã Existem ${regrasExistentes.length} regras no banco de dados`);
      
      for (const regra of regras) {
        const nomeRegra = regra.name || regra.nome;
        
        // Verificar se a regra j√° existe com o mesmo nome
        const regraExistente = regrasExistentes.find(r => r.nome === nomeRegra);
        
        if (regraExistente) {
          console.log(`‚ö†Ô∏è Regra ${nomeRegra} j√° existe, pulando inser√ß√£o`);
          continue;
        }
        
        console.log(`‚úÖ Inserindo nova regra: ${nomeRegra}`);
        
        // Inserir nova regra
        await this.regraDinamicaDAO.inserir({
          nome: nomeRegra,
          descricao: regra.description || regra.descricao,
          tipo: regra.type || regra.tipo,
          parametros: regra.parameters || regra.parametros,
          aprovada: false, // Regras geradas pela IA nunca come√ßam aprovadas
          origem: 'IA',
          ativa: true
        });
        
        console.log(`‚úÖ Nova regra din√¢mica criada pela IA: ${nomeRegra}`);
      }
      
      console.log('‚úÖ Persist√™ncia de regras conclu√≠da');
    } catch (error) {
      console.error('‚ùå Erro ao persistir regras geradas pela IA:', error.message);
    }
  }
}

module.exports = IAAdapter;